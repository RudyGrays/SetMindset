// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  role             Role       @default(USER)
  documents        Document[]
  ratingsGiven     Rating[]   @relation("AuthorRatings") // Рейтинги, оставленные пользователем
  ratings          Rating[]   @relation("UserRatings") // Рейтинги, полученные пользователем
  lessonsAsTeacher Lesson[]   @relation("TeacherLessons") // Уроки, где пользователь является учителем
  lessonsAsStudent Lesson[]   @relation("StudentLessons") // Уроки, где пользователь является учеником

  accounts Account[]
  sessions Session[]

  friends       Friend[] @relation("UserFriends")
  friendsOfUser Friend[] @relation("FriendUsers")

  chats1 Chat[] @relation("User1Chats")
  chats2 Chat[] @relation("User2Chats")

  messages Message[]

  @@map("users")
}

model Chat {
  id       Int       @id @default(autoincrement())
  user1Id  String
  user2Id  String
  user1    User      @relation("User1Chats", fields: [user1Id], references: [id])
  user2    User      @relation("User2Chats", fields: [user2Id], references: [id])
  messages Message[]

  @@unique([user1Id, user2Id])
}

model Message {
  id        Int      @id @default(autoincrement())
  chatId    Int
  senderId  String
  content   String
  createdAt DateTime @default(now())

  chat   Chat @relation(fields: [chatId], references: [id])
  sender User @relation(fields: [senderId], references: [id])

  @@index([chatId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Document {
  id       String    @id @default(cuid())
  userId   String
  filePath String
  status   DocStatus @default(PENDING)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Rating {
  id       String  @id @default(cuid())
  userId   String
  authorId String
  rating   Int
  comment  String?

  user   User @relation("UserRatings", fields: [userId], references: [id], onDelete: Cascade)
  author User @relation("AuthorRatings", fields: [authorId], references: [id], onDelete: Cascade)
}

model Lesson {
  id        String   @id @default(cuid())
  teacherId String
  studentId String
  startTime DateTime
  endTime   DateTime
  price     Float

  teacher User @relation("TeacherLessons", fields: [teacherId], references: [id], onDelete: Cascade)
  student User @relation("StudentLessons", fields: [studentId], references: [id], onDelete: Cascade)
}

model Friend {
  id       String           @id @default(cuid())
  userId   String
  friendId String
  status   FriendshipStatus @default(PENDING)

  user   User @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friend User @relation("FriendUsers", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId]) // Гарантирует, что пара "пользователь-друг" будет уникальной
  @@map("friends")
}

enum FriendshipStatus {
  PENDING // Ожидает подтверждения
  ACCEPTED // Принято
  REJECTED // Отклонено
}

enum Role {
  USER
  ADMIN
}

enum DocStatus {
  PENDING
  APPROVED
  REJECTED
}
